<?xml version="1.0" encoding="UTF-8"?>
<!--
   - Kuali Coeus, a comprehensive research administration system for higher education.
   - 
   - Copyright 2005-2015 Kuali, Inc.
   - 
   - This program is free software: you can redistribute it and/or modify
   - it under the terms of the GNU Affero General Public License as
   - published by the Free Software Foundation, either version 3 of the
   - License, or (at your option) any later version.
   - 
   - This program is distributed in the hope that it will be useful,
   - but WITHOUT ANY WARRANTY; without even the implied warranty of
   - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   - GNU Affero General Public License for more details.
   - 
   - You should have received a copy of the GNU Affero General Public License
   - along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util.xsd
                           http://activemq.apache.org/schema/core
                           http://activemq.apache.org/schema/core/activemq-core.xsd">

    <tx:annotation-driven transaction-manager="transactionManager" />
    <context:annotation-config />
    <context:component-scan base-package="org.kuali.coeus.sys" />

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties" value="#{T(org.kuali.rice.core.api.config.property.ConfigContext).getCurrentContextConfig().getProperties()}" />
    </bean>

    <import resource="classpath:org/kuali/coeus/sys/impl/SysImportRiceSpringBeans.xml"/>
    <import resource="classpath:org/kuali/coeus/sys/impl/SysImportModuleSpringBeans.xml"/>

    <!-- only brought in on the grm profile -->
    <import resource="classpath:co/kuali/coeus/grm/impl/GrmSysComponentSpringBeans.xml"/>

    <bean id="sysModule" parent="sysModule-parentBean" />
    <bean id="sysModule-parentBean" class="org.kuali.rice.krad.service.impl.ModuleServiceBase" abstract="true">
        <property name="moduleConfiguration" ref="sysModuleConfiguration"/>
        <property name="kualiModuleService" ref="kualiModuleService"/>
    </bean>

    <bean id="sysModuleConfiguration" parent="sysModuleConfiguration-parentBean" />
    <bean id="sysModuleConfiguration-parentBean" class="org.kuali.rice.krad.bo.ModuleConfiguration" abstract="true">
        <property name="namespaceCode" value="KC-SYS" />
        <property name="packagePrefixes">
            <list>
                <value>org.kuali.coeus.sys</value>
            </list>
        </property>
        <property name="providers">
            <list>
                <ref bean="jpaPersistenceProvider"/>
                <ref bean="metadataProvider"/>
            </list>
        </property>
        <property name="dataDictionaryPackages">
            <list>
               <value>classpath:org/kuali/coeus/sys/impl/view/KcTransactionalDocumentView.xml</value>
            </list>
        </property>
    </bean>

    <alias alias="kradApplicationDataSource" name="dataSource" />

    <bean id="jpaPersistenceUnitName" class="java.lang.String">
        <!-- due to lack of modularity kc has to load it's entirety in a single persistence unit -->
        <constructor-arg value="KC" />
    </bean>

    <util:list id="jpaPackagesToScan">
        <value>org.kuali.coeus</value>
        <value>org.kuali.kra</value>
    </util:list>

    <util:list id="managedClassNames" />

    <util:list id="additionalMetadataProviders" />

    <util:list id="springMetadataFileLocations" />

    <import resource="classpath:org/kuali/rice/krad/config/KRADSpringBeans-jpa-common.xml" />

    <alias name="sharedEntityManager" alias="kcEntityManager" />

    <bean id="kcPessimisticLockingJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="kcPessimisticLockService" />
        <property name="targetMethod" value="clearExpiredLocks" />
        <property name="concurrent" value="false" />
    </bean>

    <bean id="kcPessimisticLockingCronTrigger" class="org.kuali.coeus.sys.framework.scheduling.KcCronTriggerBean">
        <property name="jobDetail" ref="kcPessimisticLockingJobDetail" />
        <property name="parameterService" ref="parameterService" />
        <property name="dateTimeService" ref="dateTimeService" />
        <property name="cronExpressionParameterName" value="pessimisticLocking.cronExpression" />
        <property name="parameterNamespace" value="KC-SYS" />
        <property name="parameterComponent" value="All" />
    </bean>

    <bean id="kcQuartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="exposeSchedulerInRepository" value="true" />
        <property name="triggers">
            <list merge="true">
                <ref bean="kcPessimisticLockingCronTrigger" />
            </list>
        </property>
    </bean>

    <bean id="noEditLookupable" class="org.kuali.rice.kns.lookup.KualiLookupableImpl" scope="prototype">
        <property name="lookupableHelperService" ref="noEditLookupableHelperService" />
    </bean>

    <bean id="schemaAnalyzer" class="net.sourceforge.schemaspy.SchemaAnalyzer"/>

    <bean class="org.kuali.coeus.sys.framework.controller.interceptor.FilterRegistrator">
        <property name="filter">
            <bean class="co.kuali.coeus.sys.impl.persistence.SchemaSpyFilter">
                <property name="schemaAnalyzer" ref="schemaAnalyzer"/>
                <property name="configurationService" ref="kualiConfigurationService" />
                <property name="globalVariableService" ref="globalVariableService" />
                <property name="permissionService" ref="permissionService" />
            </bean>
        </property>
        <property name="filterName" value="SchemaSpyFilter"/>
        <property name="urlMapping">
            <bean class="org.kuali.coeus.sys.framework.controller.interceptor.FilterRegistrator.Mapping">
                <property name="matchAfter" value="true"/>
                <property name="maps">
                    <list>
                        <value>/schemaspy/*</value>
                    </list>
                </property>
            </bean>
        </property>
    </bean>

    <bean class="org.kuali.coeus.sys.framework.controller.interceptor.FilterRegistrator">
        <property name="filter">
            <bean class="co.kuali.coeus.sys.impl.monitor.MonitoringFilter">
                <property name="globalVariableService" ref="globalVariableService" />
                <property name="permissionService" ref="permissionService" />
                <property name="configurationService" ref="kualiConfigurationService" />
            </bean>
        </property>
        <property name="filterName" value="monitoring"/>
        <property name="urlMapping">
            <bean class="org.kuali.coeus.sys.framework.controller.interceptor.FilterRegistrator.Mapping">
                <property name="matchAfter" value="false"/>
                <property name="maps">
                    <list>
                        <value>/monitoring/*</value>
                    </list>
                </property>
            </bean>
        </property>
    </bean>

    <bean class="org.kuali.coeus.sys.framework.controller.interceptor.FilterRegistrator">
        <property name="filter">
            <bean class="net.bull.javamelody.MonitoringFilter"/>
        </property>
        <property name="filterName" value="javamelody"/>
        <property name="urlMapping">
            <bean class="org.kuali.coeus.sys.framework.controller.interceptor.FilterRegistrator.Mapping">
                <property name="matchAfter" value="true"/>
                <property name="maps">
                    <list>
                        <value>/*</value>
                    </list>
                </property>
            </bean>
        </property>
        <property name="initParameters">
            <map>
                <entry key="url-exclude-pattern" value="${kc.monitoring.exclude.pattern}"/>
                <entry key="log" value="${kc.monitoring.verbose.logging}"/>
                <entry key="disabled" value="#{not (T(org.kuali.rice.core.api.config.property.ConfigContext).getCurrentContextConfig().getBooleanProperty('kc.monitoring.enabled'))}" />
                <entry key="monitoring-path" value="/monitoring/jm" />
                <entry key="quartz-default-listener-disabled" value="true"/>
            </map>
        </property>
    </bean>

    <bean class="org.kuali.coeus.sys.framework.listener.ListenerRegistrator">
        <property name="listener">
            <bean class="net.bull.javamelody.SessionListener"/>
        </property>
    </bean>

    <!-- not using the activemq format here in order to use property replacement
    which cannot be done without violating schema validation -->
    <bean id="defaultRedeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy"
          p:maximumRedeliveries="${mq.redelivery.default.maximumRedeliveries}"
          p:initialRedeliveryDelay="${mq.redelivery.default.initialRedeliveryDelay}"
          p:redeliveryDelay="${mq.redelivery.default.redeliveryDelay}"
          p:useExponentialBackOff="${mq.redelivery.default.useExponentialBackOff}"
          p:backOffMultiplier="${mq.redelivery.default.backOffMultiplier}">
    </bean>

    <!-- Embedded ActiveMQ Broker -->
    <amq:broker id="embeddedBroker" useJmx="false" persistent="true" schedulerSupport="true" dataDirectory="${mq.broker.dataDirectory}">
        <amq:transportConnectors>
            <amq:transportConnector uri="tcp://localhost:0" />
        </amq:transportConnectors>

        <amq:persistenceAdapter>
            <amq:jdbcPersistenceAdapter dataSource="#dataSource" createTablesOnStartup="false" useDatabaseLock="false">
                <amq:statements>
                    <amq:statements tablePrefix="KC_" />
                </amq:statements>
            </amq:jdbcPersistenceAdapter>
        </amq:persistenceAdapter>

        <amq:destinationPolicy>
            <amq:policyMap>
                <amq:policyEntries>
                    <!-- Set the following policy on all queues using the '>' wildcard -->
                    <amq:policyEntry queue=">">
                        <amq:deadLetterStrategy>
                            <amq:individualDeadLetterStrategy
                                    queuePrefix="DLQ." useQueueForQueueMessages="true" />
                        </amq:deadLetterStrategy>
                    </amq:policyEntry>
                </amq:policyEntries>
            </amq:policyMap>
        </amq:destinationPolicy>

        <amq:plugins>
            <amq:redeliveryPlugin>
                <amq:redeliveryPolicyMap>
                    <amq:redeliveryPolicyMap>
                        <amq:defaultEntry>
                            <ref bean="defaultRedeliveryPolicy" />
                        </amq:defaultEntry>
                    </amq:redeliveryPolicyMap>
                </amq:redeliveryPolicyMap>
            </amq:redeliveryPlugin>
        </amq:plugins>
    </amq:broker>

    <!-- XA JMS Connection Factory -->
    <bean id="xaJmsConnectionFactory" class="bitronix.tm.resource.jms.PoolingConnectionFactory"
          init-method="init" destroy-method="close" depends-on="embeddedBroker">
        <property name="className" value="org.apache.activemq.ActiveMQXAConnectionFactory" />
        <property name="uniqueName" value="activemq" />
        <property name="minPoolSize" value="${mq.datasource.minPoolSize}" />
        <property name="maxPoolSize" value="${mq.datasource.maxPoolSize}" />
        <property name="allowLocalTransactions" value="true" />
        <property name="driverProperties">
            <props>
                <prop key="brokerURL">vm://localhost</prop>
            </props>
        </property>
    </bean>

    <!--  ActiveMQ REST destinations to use  -->
    <amq:queue id="restDestination" physicalName="REST_QUEUE" />

    <!-- REST Spring JMS Template -->
    <bean id="restJmsOperations" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="xaJmsConnectionFactory" />
        <property name="defaultDestination" ref="restDestination" />
        <property name="deliveryPersistent" value="true" />
        <property name="sessionTransacted" value="true" />
    </bean>

    <!-- the default destination to use for REST messages -->
    <bean class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="xaJmsConnectionFactory" />
        <property name="destination" ref="restDestination" />
        <property name="messageListener" ref="restMessageConsumer" />
        <property name="sessionAcknowledgeModeName" value="AUTO_ACKNOWLEDGE" />
        <property name="transactionManager" ref="transactionManager" />
    </bean>

    <bean id="consumerRestOperations" class="org.springframework.web.client.RestTemplate">
        <property name="errorHandler">
            <bean class="org.springframework.web.client.DefaultResponseErrorHandler" />
        </property>
    </bean>

    <bean id="activeMqMessageLookupable" class="org.kuali.rice.kns.lookup.KualiLookupableImpl" scope="prototype">
        <property name="lookupableHelperService" ref="activeMqMessageLookupableHelperService" />
    </bean>

    <bean id="genericJmsOperations" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="xaJmsConnectionFactory" />
        <property name="deliveryPersistent" value="true" />
        <property name="sessionTransacted" value="true" />
    </bean>

</beans>
